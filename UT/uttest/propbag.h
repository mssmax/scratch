#pragma once

#define SHIM_METHOD(type, mt, params, ...) type mt params { return m_pMock->mt(__VA_ARGS__); }
#define DECLARE_MOCK_FACTORY(classname) \
public: \
	class Factory {	public: MOCK_METHOD0(Create, classname##Mock*()); }; \
	classname##Mock *m_pMock; \
	static Factory m_sFactory; \
	classname() : m_pMock(m_sFactory.Create()) {} \
	virtual ~classname() {}

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

class CPropBagMock
{
public:
	MOCK_METHOD2(Set, void(int, LPCWSTR));
	MOCK_METHOD1(Get, std::wstring(int));
};

class CPropBag
{
	DECLARE_MOCK_FACTORY(CPropBag)

	SHIM_METHOD(void, Set, (int idx, LPCWSTR value), idx, value)
	SHIM_METHOD(std::wstring, Get, (int idx), idx)
};